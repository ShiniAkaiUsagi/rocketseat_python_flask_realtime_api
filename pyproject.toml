[project]
name = "rocketseat_python_flask_realtime_api"
version = "1.0.0"
description = ""
authors = [{ name = "Pedro Dias" }]
readme = "README.md"
requires-python = ">= 3.13, <4.0"
dependencies = [
    "flask (>=3.1.1,<4.0.0)",
    "qrcode (>=8.2,<9.0)",
    "pillow (>=11.2.1,<12.0.0)",
    "flask-socketio (>=5.5.1,<6.0.0)",
    "flask-cors (>=6.0.0,<7.0.0)",
    "werkzeug (>=3.1.3,<4.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "flask-sqlalchemy (>=3.1.1,<4.0.0)",
    "flask-login (>=0.6.3,<0.7.0)",
    "pymysql (>=1.1.1,<2.0.0)",
    "cryptography (>=45.0.2,<46.0.0)",
    "bcrypt (>=4.3.0,<5.0.0)",
    "faker[providers] (>=37.3.0,<38.0.0)",
    "docker (>=7.1.0,<8.0.0)",
    "marshmallow (>=4.0.0,<5.0.0)",
    "pydantic (>=2.11.5,<3.0.0)",
    "fastapi (>=0.115.12,<0.116.0)",
    "uvicorn[standard] (>=0.34.2,<0.35.0)",
    "sqlalchemy (>=2.0.41,<3.0.0)",
    "alembic (>=1.16.1,<2.0.0)",
    "pytest (>=8.3.5,<9.0.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "pytest-asyncio (>=1.0.0,<2.0.0)",
    "pytest-xdist (>=3.7.0,<4.0.0)",
    ]


[tool.poetry]
package-mode = false


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
bandit = "^1.8.3"
black = "^25.1.0"
flake8 = "^7.2.0"
flake8-pyproject = "^1.2.3"
isort = "^6.0.1"
pre-commit = "^4.2.0"
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"
pytest-flask = "^1.3.0"
pytest-html = "^4.1.1"

### Plugins PyTest
# pytest-cov	    Medição de cobertura com --cov, --cov-report=html/xml, etc.
# pytest-asyncio	Suporte a testes async def e await com asyncio.
#################   Flask/SQLAlchemy são síncronos, então não funciona aqui :')
# pytest-xdist	    Paralelização com -n auto, ótimo para acelerar os testes locais.
# pytest-mock	    Facilita o uso do unittest.mock com fixtures.
# pytest-django	    Para projetos Django, com setup de DB automático para testes.
# pytest-httpx	    Simula chamadas HTTP em testes com a lib httpx.



[tool.black]
line-length = 88


[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = 'True'
force_grid_wrap = 0
use_parentheses = 'True'
ensure_newline_before_comments = 'True'
line_length = 88


[tool.flake8]
max-line-length = 88
# extend-select = 'B950'
extend-ignore = ['E501'] # ['E203', 'E701']


[tool.bandit]
exclude_dirs = ["*/test_*.py", "*/*_test.py"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]


[tool.pytest.ini_options]
pythonpath = ["."]
minversion = "8.0"
addopts = """
    -ra
    -q 
    --dist=loadfile
    -n 4
    --html=report.html
    --self-contained-html
    --junitxml=report.xml
    --cov=src
    --cov=sample/payment/src
    --cov-report=html 
    --cov-report=xml 
    --disable-warnings
    """

# --junitxml=report.xml  para report CI/CD
# --maxfail=1 parar no primeiro erro
# -ra para relatório
# -q para menos verbosidade
# para ver o html de coverage: start htmlcov\index.html
# no sonar.properties: sonar.python.coverage.reportPaths=coverage.xml

testpaths = [
    "tests",
    "sample/payment/tests",
    ]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"


[tool.coverage.run]
branch = true
source = [
    "src",
    "sample/payment/src",
    ]


[tool.coverage.report]
show_missing = true
fail_under = 0
skip_covered = false
exclude_lines = [
    "if __name__ == .__main__.:"
    ]
